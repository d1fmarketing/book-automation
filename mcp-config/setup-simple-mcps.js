#!/usr/bin/env node

/**
 * Simple MCP Setup
 * 
 * Configura MCPs usando versÃµes jÃ¡ compiladas e npx
 */

const fs = require('fs');
const path = require('path');
const os = require('os');

// Paths
const CLAUDE_CONFIG_PATH = path.join(
    os.homedir(),
    'Library/Application Support/Claude/claude_desktop_config.json'
);

// Load environment variables
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

async function main() {
    console.log('ðŸš€ Configurando MCPs para Book Automation\n');
    
    // Backup
    const config = JSON.parse(fs.readFileSync(CLAUDE_CONFIG_PATH, 'utf8'));
    const backupPath = CLAUDE_CONFIG_PATH + '.backup-' + Date.now();
    fs.writeFileSync(backupPath, JSON.stringify(config, null, 2));
    console.log(`ðŸ“‹ Backup salvo em: ${backupPath}\n`);
    
    // 1. Migrar browserbase para Anthropic
    const browserbaseKey = 'github.com/browserbase/mcp-server-browserbase/tree/main/stagehand';
    if (config.mcpServers[browserbaseKey]) {
        console.log('ðŸ”„ Migrando browserbase de OpenAI para Anthropic...');
        delete config.mcpServers[browserbaseKey].env.OPENAI_API_KEY;
        config.mcpServers[browserbaseKey].env.ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
        console.log('  âœ… Migrado para usar Anthropic\n');
    }
    
    // 2. Adicionar MCPs Ãºteis para o projeto
    console.log('ðŸ“¦ Adicionando MCPs para Book Automation...\n');
    
    // Filesystem - usar o existente
    if (!config.mcpServers['book-automation-filesystem']) {
        config.mcpServers['book-automation-filesystem'] = {
            autoApprove: ['read_file', 'write_file', 'list_directory'],
            disabled: false,
            timeout: 60,
            command: 'npx',
            args: [
                '-y',
                '@modelcontextprotocol/server-filesystem',
                path.join(__dirname, '..')
            ],
            env: {},
            transportType: 'stdio'
        };
        console.log('  âœ… Filesystem MCP adicionado');
    }
    
    // Memory - usar npx
    if (!config.mcpServers['book-automation-memory']) {
        config.mcpServers['book-automation-memory'] = {
            autoApprove: ['store_memory', 'retrieve_memory'],
            disabled: false,
            timeout: 60,
            command: 'npx',
            args: [
                '-y',
                '@modelcontextprotocol/server-memory'
            ],
            env: {
                MEMORY_FILE_PATH: path.join(__dirname, '..', 'mcp-data', 'memory.json')
            },
            transportType: 'stdio'
        };
        console.log('  âœ… Memory MCP adicionado');
    }
    
    // GitHub - usar npx
    if (!config.mcpServers['book-automation-github']) {
        config.mcpServers['book-automation-github'] = {
            autoApprove: ['create_pr', 'list_issues', 'create_repository'],
            disabled: false,
            timeout: 60,
            command: 'npx',
            args: [
                '-y',
                '@modelcontextprotocol/server-github'
            ],
            env: {
                GITHUB_PERSONAL_ACCESS_TOKEN: process.env.GITHUB_TOKEN || process.env.GITHUB_PERSONAL_ACCESS_TOKEN
            },
            transportType: 'stdio'
        };
        console.log('  âœ… GitHub MCP adicionado');
    }
    
    // Brave Search - para pesquisa de conteÃºdo
    if (!config.mcpServers['book-automation-search']) {
        config.mcpServers['book-automation-search'] = {
            autoApprove: ['search'],
            disabled: false,
            timeout: 60,
            command: 'npx',
            args: [
                '-y',
                '@modelcontextprotocol/server-brave-search'
            ],
            env: {
                BRAVE_API_KEY: 'BSAAUX6uV_s0t-1i8BLaNZY5ls9jiYS' // JÃ¡ tem no config original
            },
            transportType: 'stdio'
        };
        console.log('  âœ… Brave Search MCP adicionado');
    }
    
    // Puppeteer - para gerar PDFs
    if (!config.mcpServers['book-automation-puppeteer']) {
        config.mcpServers['book-automation-puppeteer'] = {
            autoApprove: ['screenshot', 'pdf'],
            disabled: false,
            timeout: 120,
            command: 'npx',
            args: [
                '-y',
                '@modelcontextprotocol/server-puppeteer'
            ],
            env: {},
            transportType: 'stdio'
        };
        console.log('  âœ… Puppeteer MCP adicionado');
    }
    
    // Sequential Thinking - usar o existente
    if (!config.mcpServers['book-automation-thinking']) {
        config.mcpServers['book-automation-thinking'] = {
            autoApprove: ['sequentialthinking'],
            disabled: false,
            timeout: 60,
            command: 'npx',
            args: [
                '-y',
                '@modelcontextprotocol/server-sequential-thinking'
            ],
            env: {},
            transportType: 'stdio'
        };
        console.log('  âœ… Sequential Thinking MCP adicionado');
    }
    
    // Salvar configuraÃ§Ã£o
    fs.writeFileSync(CLAUDE_CONFIG_PATH, JSON.stringify(config, null, 2));
    console.log('\nâœ… ConfiguraÃ§Ã£o atualizada com sucesso!');
    
    // Criar diretÃ³rio para dados MCP
    const mcpDataDir = path.join(__dirname, '..', 'mcp-data');
    fs.mkdirSync(mcpDataDir, { recursive: true });
    
    // Criar documentaÃ§Ã£o
    const docs = `# MCPs Configurados para Book Automation

## MCPs Ativos

### 1. Anthropic
- GeraÃ§Ã£o de texto
- AnÃ¡lise de conteÃºdo
- Reescrita de capÃ­tulos

### 2. Filesystem
- Leitura/escrita de arquivos
- Gerenciamento de capÃ­tulos
- Acesso a templates

### 3. Memory
- PersistÃªncia de contexto
- Rastreamento de progresso
- Armazenamento de metadados do livro

### 4. GitHub
- CriaÃ§Ã£o de PRs
- Versionamento
- Gerenciamento de releases

### 5. Brave Search
- Pesquisa de conteÃºdo
- VerificaÃ§Ã£o de fatos
- Pesquisa de referÃªncias

### 6. Puppeteer
- GeraÃ§Ã£o de PDFs
- Screenshots de preview
- AutomaÃ§Ã£o de browser

### 7. Sequential Thinking
- Planejamento estruturado
- DecomposiÃ§Ã£o de tarefas
- CriaÃ§Ã£o de outlines

## Uso no Projeto

### Para criar um novo livro:
1. Use Memory para armazenar conceito
2. Use Sequential Thinking para planejar
3. Use Filesystem para criar estrutura
4. Use Anthropic para gerar conteÃºdo
5. Use GitHub para versionar
6. Use Puppeteer para gerar PDF

### Para pesquisar tÃ³picos:
1. Use Brave Search para encontrar informaÃ§Ã£o
2. Use Anthropic para analisar e resumir
3. Use Memory para guardar insights

## Comandos Ãšteis

\`\`\`bash
# Reiniciar Claude para aplicar mudanÃ§as
# macOS: Cmd+Q e reabrir

# Verificar logs MCP
tail -f ~/Library/Logs/Claude/*.log

# Testar MCP individual
npx @modelcontextprotocol/inspector
\`\`\`
`;
    
    fs.writeFileSync(path.join(__dirname, '..', 'MCP-SETUP.md'), docs);
    console.log('ðŸ“š DocumentaÃ§Ã£o criada: MCP-SETUP.md');
    
    console.log('\nðŸ”„ Por favor, reinicie o Claude Desktop para aplicar as mudanÃ§as.');
    
    // Mostrar resumo
    console.log('\nðŸ“Š Resumo:');
    console.log('  - Browserbase migrado para Anthropic API');
    console.log('  - 6 MCPs configurados para o projeto');
    console.log('  - Todos usando npx (sem necessidade de instalaÃ§Ã£o local)');
    console.log('  - ConfiguraÃ§Ã£o otimizada para automaÃ§Ã£o de ebooks');
}

main().catch(console.error);