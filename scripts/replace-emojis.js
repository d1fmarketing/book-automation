#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Console colors
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    green: '\x1b[32m',
    blue: '\x1b[34m',
    cyan: '\x1b[36m',
    yellow: '\x1b[33m'
};

// Map of emojis to professional Unicode symbols or HTML entities
const emojiReplacements = {
    // Tips and info
    'üí°': '‚óÜ', // Diamond for tips
    '‚ú®': '‚òÖ', // Star
    'üîë': '‚öø', // Key symbol
    'üì±': '‚ñ£', // Mobile/tech symbol
    'üëõ': '‚óà', // Wallet/purse
    'üéß': '‚ô´', // Music/headphones
    'üï∂Ô∏è': '‚óâ', // Glasses
    'üëì': '‚óâ', // Glasses alternative
    
    // Warnings and alerts
    '‚ö†Ô∏è': '‚ñ≤', // Warning triangle
    'üö®': '!', // Alert
    '‚ùó': '!', // Exclamation
    '‚ö°': '‚ÜØ', // Lightning/energy
    
    // Actions and checks
    '‚úÖ': '‚úì', // Checkmark
    '‚òê': '‚ñ°', // Checkbox empty
    '‚úì': '‚úì', // Already a checkmark
    'üëÜ': '‚Üë', // Up arrow
    'üëá': '‚Üì', // Down arrow
    '‚û°Ô∏è': '‚Üí', // Right arrow
    '‚¨ÖÔ∏è': '‚Üê', // Left arrow
    
    // Numbers and bullets
    '1Ô∏è‚É£': '‚ë†', // Circled 1
    '2Ô∏è‚É£': '‚ë°', // Circled 2
    '3Ô∏è‚É£': '‚ë¢', // Circled 3
    '4Ô∏è‚É£': '‚ë£', // Circled 4
    '5Ô∏è‚É£': '‚ë§', // Circled 5
    
    // Emotions and people
    'üòä': '‚ò∫', // Smiley
    'üòî': '‚òπ', // Sad
    'ü§î': '?', // Thinking
    'üë§': '‚óâ', // Person
    'üë•': '‚óâ‚óâ', // People
    
    // Objects and things
    'üè†': '‚åÇ', // House
    'üöó': '‚óß', // Car
    'üè¢': '‚ñ¢', // Building
    'üì¶': '‚ñ´', // Box/package
    'üìã': '‚ñ§', // Clipboard
    'üìä': '‚ñ¶', // Chart
    'üéØ': '‚óé', // Target
    'üèÜ': '‚òÖ', // Trophy
    'üéÆ': '‚ñ£', // Game controller
    
    // Time and calendar
    '‚è∞': '‚ó∑', // Clock/alarm
    'üìÖ': '‚ñ¶', // Calendar
    '‚è±Ô∏è': '‚ó∑', // Timer
    
    // Communication
    'üí¨': '‚óå', // Speech bubble
    'üìß': '@', // Email
    'üåê': '‚óç', // Globe/web
    'üìû': '‚òé', // Phone
    
    // Misc
    'üîÑ': '‚Üª', // Refresh/sync
    'üé®': '‚óÜ', // Art/color
    'üñºÔ∏è': '‚ñ≠', // Image/picture
    'üè∑Ô∏è': '‚óà', // Tag/label
    'üõ†Ô∏è': '‚öí', // Tools
    'üß†': '‚óé', // Brain
    'üí™': '‚óÜ', // Strong/muscle
    'üéâ': '‚òÖ', // Celebration
    'üöÄ': '‚Üó', // Rocket/launch
    'üîç': '‚óé', // Search/magnifier
    'üìö': '‚ñ¨', // Books
    'üéÅ': '‚óà', // Gift
    'üåü': '‚òÖ', // Star
    
    // Faces and expressions
    'ü§ñ': '[AI]', // Robot
    'üòÑ': '‚ò∫', // Happy
    'üòé': '‚óâ', // Cool
    'ü•≥': '‚òÖ', // Party
    
    // Nature
    'üåà': '~', // Rainbow
    '‚òÄÔ∏è': '‚òº', // Sun
    'üåô': '‚òæ', // Moon
    '‚≠ê': '‚òÖ', // Star
    
    // Food
    '‚òï': '‚óâ', // Coffee
    'üçé': '‚óâ', // Apple/food
    
    // Hearts and love
    '‚ù§Ô∏è': '‚ô•', // Heart
    'üíö': '‚ô•', // Green heart
    'üíô': '‚ô•', // Blue heart
    'üß°': '‚ô•', // Orange heart
    
    // Hands
    'üëç': '+', // Thumbs up
    'üëé': '-', // Thumbs down
    'üëè': '!', // Clapping
    'üôè': '!', // Prayer/thanks
    '‚úã': '!', // Hand/stop
    'ü§ù': '&', // Handshake
    
    // Arrows and directions
    '‚¨ÜÔ∏è': '‚Üë', // Up
    '‚¨áÔ∏è': '‚Üì', // Down
    '‚Ü©Ô∏è': '‚Ü©', // Return
    '‚Ü™Ô∏è': '‚Ü™', // Forward
    
    // Status
    'üî¥': '‚óè', // Red circle
    'üü¢': '‚óè', // Green circle
    'üü°': '‚óè', // Yellow circle
    'üîµ': '‚óè', // Blue circle
    
    // Tech
    'üíª': '‚ñ£', // Computer
    'üñ•Ô∏è': '‚ñ£', // Desktop
    '‚å®Ô∏è': '‚ñ§', // Keyboard
    'üñ±Ô∏è': '‚óâ', // Mouse
    'üíæ': '‚ñ´', // Save/disk
    'üì≤': '‚ñ£', // Mobile with arrow
    
    // Money
    'üí∞': '$', // Money bag
    'üíµ': '$', // Dollar
    'üí≥': '‚ñ¨', // Credit card
    
    // Transport
    '‚úàÔ∏è': '‚Üó', // Airplane
    'üöÇ': '‚Üí', // Train
    'üö∂': '‚óâ', // Walking
    'üèÉ': '‚óâ', // Running
    
    // Weather
    '‚òî': '‚óä', // Rain/umbrella
    '‚ùÑÔ∏è': '*', // Snow
    'üå°Ô∏è': '|', // Temperature
    
    // Medical
    'üíä': '‚óâ', // Pill
    'üè•': '‚ñ¢', // Hospital
    'ü©∫': '+', // Medical
    
    // Education
    'üéì': '‚óé', // Graduation
    '‚úèÔ∏è': '/', // Pencil
    'üìù': '‚ñ§', // Note
    
    // Security
    'üîí': '‚óà', // Lock
    'üîì': '‚óá', // Unlock
    'üîê': '‚óà', // Key lock
    'üõ°Ô∏è': '‚óä', // Shield
    
    // Flags and signals
    'üö©': '‚ñ≤', // Red flag
    'üèÅ': '‚ñ¶', // Checkered flag
    'üéå': '‚óâ', // Crossed flags
    
    // Gender
    '‚ôÇÔ∏è': '‚ôÇ', // Male
    '‚ôÄÔ∏è': '‚ôÄ', // Female
    
    // Punctuation
    '‚ùì': '?', // Question
    '‚ùî': '?', // White question
    '‚ùï': '!', // White exclamation
    '‚ÄºÔ∏è': '!!', // Double exclamation
    
    // Math and symbols
    '‚ûï': '+', // Plus
    '‚ûñ': '-', // Minus
    '‚úñÔ∏è': '√ó', // Multiply
    '‚ûó': '√∑', // Divide
    'üíØ': '100', // 100
    
    // Shapes
    '‚≠ï': '‚óã', // Circle
    'üî≤': '‚ñ°', // Square
    'üî≥': '‚ñ†', // Filled square
    'üî∂': '‚óÜ', // Diamond
    'üî∑': '‚óá', // Diamond outline
    
    // Music
    'üéµ': '‚ô™', // Music note
    'üé∂': '‚ô´', // Music notes
    'üîä': '‚ñ∂', // Speaker
    'üîá': '‚óÄ', // Muted
    
    // Games
    'üé≤': '‚öÇ', // Dice
    '‚ô†Ô∏è': '‚ô†', // Spades
    '‚ô•Ô∏è': '‚ô•', // Hearts
    '‚ô¶Ô∏è': '‚ô¶', // Diamonds
    '‚ô£Ô∏è': '‚ô£', // Clubs
    
    // Zodiac
    '‚ôà': '‚ôà', // Aries
    '‚ôâ': '‚ôâ', // Taurus
    '‚ôä': '‚ôä', // Gemini
    '‚ôã': '‚ôã', // Cancer
    '‚ôå': '‚ôå', // Leo
    '‚ôç': '‚ôç', // Virgo
    '‚ôé': '‚ôé', // Libra
    '‚ôè': '‚ôè', // Scorpio
    '‚ôê': '‚ôê', // Sagittarius
    '‚ôë': '‚ôë', // Capricorn
    '‚ôí': '‚ôí', // Aquarius
    '‚ôì': '‚ôì' // Pisces
};

function replaceEmojisInFile(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');
    let modifiedContent = content;
    let replacementCount = 0;
    
    // Replace each emoji
    for (const [emoji, replacement] of Object.entries(emojiReplacements)) {
        const regex = new RegExp(emoji, 'g');
        const matches = modifiedContent.match(regex);
        if (matches) {
            replacementCount += matches.length;
            modifiedContent = modifiedContent.replace(regex, replacement);
        }
    }
    
    if (replacementCount > 0) {
        fs.writeFileSync(filePath, modifiedContent);
        console.log(`  ${colors.green}‚úì${colors.reset} Replaced ${replacementCount} emojis in ${path.basename(filePath)}`);
    }
    
    return replacementCount;
}

function processDirectory(dirPath) {
    console.log(`${colors.green}${colors.bright}üîÑ Replacing emojis with professional symbols...${colors.reset}`);
    
    const files = fs.readdirSync(dirPath)
        .filter(f => f.endsWith('.md'))
        .sort();
    
    let totalReplacements = 0;
    
    console.log(`${colors.blue}üìÅ Processing ${files.length} markdown files...${colors.reset}`);
    
    for (const file of files) {
        const filePath = path.join(dirPath, file);
        totalReplacements += replaceEmojisInFile(filePath);
    }
    
    console.log(`\n${colors.green}${colors.bright}‚úÖ Emoji replacement complete!${colors.reset}`);
    console.log(`${colors.cyan}Total replacements: ${totalReplacements}${colors.reset}`);
    
    // Also update the generator script to use icon font
    const generatorPath = path.join(__dirname, 'pdf-presets/professional.js');
    if (fs.existsSync(generatorPath)) {
        console.log(`\n${colors.blue}üìù Updating PDF generator preset...${colors.reset}`);
        let generatorContent = fs.readFileSync(generatorPath, 'utf8');
        
        // Add icon font CSS
        const iconFontCSS = `
        /* Professional icon font */
        @font-face {
            font-family: 'BookIcons';
            src: local('Arial Unicode MS'), local('Symbola'), local('DejaVu Sans');
            font-weight: normal;
            font-style: normal;
        }
        
        .icon {
            font-family: 'BookIcons', 'Arial Unicode MS', 'Symbola', sans-serif;
            font-size: 1.1em;
            line-height: 1;
            display: inline-block;
            vertical-align: middle;
            margin: 0 0.1em;
        }`;
        
        // Insert icon font CSS if not already present
        if (!generatorContent.includes('BookIcons')) {
            generatorContent = generatorContent.replace(
                '/* Professional Color Palette - CMYK-friendly */',
                iconFontCSS + '\n        \n        /* Professional Color Palette - CMYK-friendly */'
            );
            fs.writeFileSync(generatorPath, generatorContent);
            console.log(`  ${colors.green}‚úì${colors.reset} Added icon font CSS to generator`);
        }
    }
}

// Run if called directly
if (require.main === module) {
    const chaptersDir = path.join(__dirname, '../chapters');
    
    if (fs.existsSync(chaptersDir)) {
        processDirectory(chaptersDir);
    } else {
        console.error(`${colors.red}‚ùå Chapters directory not found: ${chaptersDir}${colors.reset}`);
        process.exit(1);
    }
}

module.exports = { replaceEmojisInFile, emojiReplacements };