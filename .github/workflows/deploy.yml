name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run linting
        run: npm run lint:check

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            cd /opt/ebook-automation
            git pull origin main
            
            # Update environment
            echo "IMAGE_TAG=${{ github.sha }}" > deploy/.env.deploy
            
            # Run deployment
            cd deploy
            ./deploy.sh ${{ github.event.inputs.environment || 'production' }} update
      
      - name: Verify deployment
        run: |
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.DEPLOY_HOST }}/health)
          if [ $response -eq 200 ]; then
            echo "✅ Deployment verified successfully"
          else
            echo "❌ Deployment verification failed"
            exit 1
          fi

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          curl -X POST ${{ secrets.DEPLOY_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{
              "status": "success",
              "environment": "${{ github.event.inputs.environment || 'production' }}",
              "commit": "${{ github.sha }}",
              "author": "${{ github.actor }}",
              "message": "${{ github.event.head_commit.message }}"
            }'
      
      - name: Notify failure
        if: ${{ needs.deploy.result != 'success' }}
        run: |
          curl -X POST ${{ secrets.DEPLOY_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{
              "status": "failed",
              "environment": "${{ github.event.inputs.environment || 'production' }}",
              "commit": "${{ github.sha }}",
              "author": "${{ github.actor }}",
              "workflow_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }'