name: Build eBook

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      formats:
        description: 'Formatos para gerar'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - pdf
          - epub

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  build:
    name: Build eBook
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: üì¶ Instalar depend√™ncias do sistema
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pandoc \
          fonts-liberation \
          fonts-noto \
          fonts-dejavu-core

    - name: üì¶ Instalar depend√™ncias Node.js
      run: npm ci

    - name: üì¶ Instalar depend√™ncias Python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üß™ Executar testes
      run: |
        npm run lint:check
        python scripts/wordcount.py

    - name: üîç Verificar Contexto e Continuidade
      run: |
        echo "Analisando cap√≠tulos..."
        python scripts/analyze-chapters.py
        
        echo "Verificando continuidade..."
        python scripts/continuity-check.py
        
        # Fail if continuity errors found
        if [ -f context/continuity-report.json ]; then
          ERROR_COUNT=$(python -c "import json; data=json.load(open('context/continuity-report.json')); print(data['summary']['errors'])")
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "‚ùå Encontrados $ERROR_COUNT erros de continuidade!"
            cat context/continuity-report.json
            exit 1
          fi
        fi
        
        echo "‚úÖ Verifica√ß√µes de contexto passaram!"

    - name: üìö Build PDF
      if: github.event.inputs.formats == 'pdf' || github.event.inputs.formats == 'all' || github.event.inputs.formats == ''
      run: npm run build:pdf

    - name: üìñ Build EPUB
      if: github.event.inputs.formats == 'epub' || github.event.inputs.formats == 'all' || github.event.inputs.formats == ''
      run: npm run build:epub

    - name: üì§ Upload artefatos
      uses: actions/upload-artifact@v4
      with:
        name: ebook-builds-${{ github.sha }}
        path: |
          build/dist/*.pdf
          build/dist/*.epub
        retention-days: 30

    - name: üìä Relat√≥rio de build
      if: always()
      run: |
        echo "## üìä Relat√≥rio de Build" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Arquivos gerados:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -lh build/dist/ || echo "Nenhum arquivo gerado" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  release:
    name: Criar Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: üì• Download artefatos
      uses: actions/download-artifact@v4
      with:
        name: ebook-builds-${{ github.sha }}
        path: ./dist

    - name: üè∑Ô∏è Criar Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
        files: |
          dist/*.pdf
          dist/*.epub
        body: |
          ## üìö Nova vers√£o do eBook
          
          Build autom√°tico #${{ github.run_number }}
          
          ### Arquivos dispon√≠veis:
          - PDF: Formato profissional 6x9"
          - EPUB: Compat√≠vel com todos os leitores
          
          ---
          *Gerado automaticamente pelo pipeline de CI/CD*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}